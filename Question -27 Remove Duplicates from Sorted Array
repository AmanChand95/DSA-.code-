Approach: Use two pointers: one (k) to keep track of the position to place the next unique element, and another (i) to iterate through the array. Compare each element with the last unique element added. If different, add it to the position indicated by k and increment k

Time Complexity: O(n), where n is the length of the array . The array is traversed once.
Space Complexity: O(1)
The modification is done in-place, using only a constant amount of extra space

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.empty()) return 0;
        
        int k = 0; 
        
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0 || nums[i] != nums[k-1]) {
                nums[k] = nums[i];
                k++;
            }
        }
        
        return k;
    }
};
