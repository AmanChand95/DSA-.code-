Majority element 169 leetcode
1st method 
Approach:
For each element, count its occurrences in the entire array
If count exceeds n/2, return that element
Time Complexity: O(n^2) 
Space Complexity: O(1)

2nd method
Approach:
Use Moore's Voting Algorithm to find a candidate for the majority element
Verify if the candidate is indeed the majority element
Time Complexity: O(n) 
Space Complexity: O(1)

int majorityElement(vector<int> v) {
    int n = v.size();
    for (int i = 0; i < n; i++) {
        int cnt = 0;
        for (int j = 0; j < n; j++) {

            if (v[j] == v[i]) {
                cnt++;
            }
        }

        if (cnt > (n / 2))
            return v[i];
    }

    return -1;
}

//2nd method

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int cnt = 0;
        int el;
        for(int i = 0; i < n; i++) {
            if(cnt == 0) {
                cnt = 1;
                el = nums[i];
            }
            else if(nums[i] == el) {
                cnt++;
            }
            else {
                cnt--;
            }
        }
        int cnt1 = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == el) {  
                cnt1++;
            }
        }
        
        if(cnt1 > n / 2) { 
            return el;
        }
        
        return -1;
    }
};
