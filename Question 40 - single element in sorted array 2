class Solution {
public:
    bool search(vector<int>& arr, int target) {
        int n = arr.size();
        int start = 0, end = n - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (arr[mid] == target) return true;
            if (arr[start] == arr[mid] && arr[mid] == arr[end]) {
                start = start + 1;
                end = end - 1;
                continue;
            }
            if (arr[start] <= arr[mid]) {
                if (arr[start] <= target && target <= arr[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (arr[mid] <= target && target <= arr[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return false;
    }
};
Use binary search, but with additional handling for duplicates. Check if the middle element is the target. Handle the case where start, mid, and end elements are equal. Determine which half of the array is sorted and if the target lies in that half.
Time Complexity: O(log n) in the best case, O(n) in the worst case (when many elements are duplicates)
Space Complexity: O(1)
