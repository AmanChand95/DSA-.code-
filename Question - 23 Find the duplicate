1 st approach 
Approach: Sort the array. Iterate through the sorted array and compare adjacent elements. If two adjacent elements are the same, that's the duplicate.

Time Complexity: O(n log n) due to the sorting operation
Space Complexity: O(1) or O(n), depending on the sorting algorithm used
2 nd approach
Approach: Use an unordered_map to keep track of the frequency of each number. Iterate through the array once. For each number, increment its count in the map . If a number's count becomes greater than 1, return that number as the duplicate

Time Complexity: O(n), where n is the size of the array
Each insertion and lookup in an unordered_map is O(1) on average
Space Complexity: O(n) in the worst case, to store all numbers in the map.

//1 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       
        if (nums.empty()) {
            return -1; 
        }
 
        sort(nums.begin(), nums.end());
        
    
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] == nums[i-1]) {
                return nums[i];
            }
        }
         return -1;
    }
};
   


//2 nd 
#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;

class Solution {
public:
 int findDuplicate(vector<int> arr){
    unordered_map<int, int>hash;
    int n = arr.size();
    for(int i = 0; i<n ;i++){
        hash[arr[i]]++;
        if( hash[arr[i]]>1){
            return arr[i];
        }
    }
     return -1;
   } 
};
int main(){
    Solution solution;

    // Test case 1: Duplicate appears twice
    vector<int> arr1 = {1, 3, 4, 2, 2};
    cout << "Test case 1: ";
    cout << "The duplicate element is: " << solution.findDuplicate(arr1) << endl;

    // Test case 2: Duplicate appears more than twice
    vector<int> arr2 = {3, 1, 3, 4, 2, 3};
    cout << "Test case 2: ";
    cout << "The duplicate element is: " << solution.findDuplicate(arr2) << endl;

    // Test case 3: All elements are the same
    vector<int> arr3 = {3, 3, 3, 3, 3};
    cout << "Test case 3: ";
    cout << "The duplicate element is: " << solution.findDuplicate(arr3) << endl;

    return 0;

}
