class Solution {
public:
    vector<int> searchRange(vector<int>& arr, int target) {
        int n = arr.size();
        int first = -1, last = -1;
   
        int start = 0, end = n - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target) {
                first = mid;
                end = mid - 1; 
            } else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
   
        start = 0, end = n - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target) {
                last = mid;
                start = mid + 1; 
            } else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return {first, last};
    }
};
Use binary search to find the first and last positions of the target in a sorted array.
The first search locates the leftmost occurrence of the target, while the second search finds the rightmost occurrence.
Both searches utilize the properties of sorted arrays to efficiently narrow down the search space.
Time Complexity
O(log n): Each binary search operates in logarithmic time, resulting in a total time complexity of O(log n) for finding both the first and last positions.
Space Complexity
O(1): The algorithm uses a constant amount of space for variables, independent of the input size.
