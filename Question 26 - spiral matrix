Spiral Matrix (LeetCode-54)
Approach: Initialize four boundaries: starting row, ending column, ending row, and starting column. Traverse the matrix in a spiral order, updating these boundaries after each traversal. Use a count variable to keep track of the number of elements added to the result
Time Complexity: O(m * n), where m is the number of rows and n is the number of columns. Each element is visited exactly once
Space Complexity: O(1) excluding the space used for the output
If we consider the space for the output, it would be O(m * n).


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        
        int n = matrix.size();
        int m = matrix[0].size();
        int total_element = m * n; 
        int starting_row = 0;
        int ending_col = m - 1;
        int ending_row = n - 1;
        int starting_col = 0;
        int count = 0;
        
        while (count < total_element) {

            for (int i = starting_col; i <= ending_col && count < total_element; i++) {
                ans.push_back(matrix[starting_row][i]);
                count++;
            }
            starting_row++;
            
            for (int i = starting_row; i <= ending_row && count < total_element; i++) {
                ans.push_back(matrix[i][ending_col]);
                count++;
            }
            ending_col--;
            
            for (int i = ending_col; i >= starting_col && count < total_element; i--) {
                ans.push_back(matrix[ending_row][i]);
                count++;
            }
            ending_row--;
            
            for (int i = ending_row; i >= starting_row && count < total_element; i--) {
                ans.push_back(matrix[i][starting_col]);
                count++;
            }
            starting_col++;
        }
        
        return ans;
    }
};
