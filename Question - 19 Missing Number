//1 st method 
Approach: Using a hash vector to mark present numbers.
 Time Complexity: O(n), where n is the size of the array.
 Space Complexity: O(n) for the hash vector.

#include <iostream>
using namespace std;

int missingNumber(vector<int>& a, int N) {
    vector<int> hash(N + 1, 0);
    for (int i = 0; i < N - 1; i++) {
        hash[a[i]] = 1;
    }
    for (int i = 1; i <= N; i++) {
        if (hash[i] == 0) {
            return i;
        }
    }
    return -1; // This line should never be reached if the input is valid
}

int main()
{
    int N = 5;
    vector<int> a = {1,2, 4, 5};
    int ans = missingNumber(a, N);
    cout << "The missing number is: " << ans << endl;
    return 0;
}
//2nd method

 Approach: Using the mathematical formula for the sum of first n natural no. 
 Time Complexity: O(n), where n is the size of the array.
 Space Complexity: O(1), using only a few variables.

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i = 0; i<n ; i++){
            sum += nums[i];
        }
        int totalsum = ((n)*(n+1))/2;
        int ans = totalsum - sum ;
        return ans;

    }
};
