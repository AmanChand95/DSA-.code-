Find Pivot Index
1st method .
Approach: Iterate through each index. For each index, calculate left sum and right sum. If they're equal, return that index
Time Complexity: O(n^2), where n is the size of the array 
Space Complexity: O(1), using only a few variables

2 nd method
Approach: Precalculated left and right sums for each index. Iterate once to find where left sum equals right sum

Time Complexity: O(n), where n is the size of the array Space Complexity: O(n), for storing left and right sum arrays.

int findpivot(vector<int>& nums) {
    int n = nums.size();
    
    for(int i = 0; i < n; i++) {
        int lsum = 0;
        int rsum = 0;
     
        for(int j = 0; j < i; j++) {
            lsum += nums[j];
        }
   
        for(int j = i + 1; j < n; j++) {
            rsum += nums[j];
        }
        
        if(lsum == rsum) {
            return i;
        }
    }
    return -1;
}

//2nd

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
    int n = nums.size();
    vector<int> lsum(n, 0);
    vector<int> rsum(n, 0);

    for(int i = 1; i < n; i++) {
        lsum[i] = lsum[i-1] + nums[i-1];
    }

    for(int i = n-2; i >= 0; i--) {
        rsum[i] = rsum[i+1] + nums[i+1];
    }

    for(int i = 0; i < n; i++) {
        if(lsum[i] == rsum[i])
            return i;
    }

    return -1;
}
    
};
